import matplotlib.pyplot as plt
from sklearn.manifold import MDS
import numpy as np
from numpy import sqrt
import time

# Параметры
n = 1000  # Количество городов
m = 100   # Максимальное значение координат
ib = 3    # Начальный индекс города
way = []
a = 0     # Минимальное значение координат

# Генерация случайных координат городов
X = np.random.uniform(a, m, n)
Y = np.random.uniform(a, m, n)

# Закомментированные значения для координат

def generate_coordinates_from_distance_matrix(distance_matrix):
    # Убедимся, что матрица симметрична
    distance_matrix = (distance_matrix + distance_matrix.T) / 2
    np.fill_diagonal(distance_matrix, 0)

    # Используем MDS для восстановления координат
    mds = MDS(dissimilarity='precomputed', random_state=42)
    coordinates = mds.fit_transform(distance_matrix)
    return coordinates[:, 0], coordinates[:, 1]

distance_matrix = np.array([
    [0, 220, 236, 253, 363, 305, 99, 271, 502, 57, 279, 431, 319, 404, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [220, 0, 482, 649, 351, 435, 351, 276, 566, 98, 343, 495, 274, 366, 177, 368, 225, 188, 361, 548, 161, 553, 219, 249, 106, 139, 67, 65, 100, 325],
    [236, 482, 0, 158, 145, 146, 248, 298, 311, 248, 369, 274, 248, 366, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248],
    [253, 649, 158, 0, 311, 311, 253, 298, 311, 253, 311, 311, 253, 311, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253],
    [363, 351, 145, 311, 0, 93, 363, 351, 311, 363, 351, 311, 363, 351, 363, 351, 363, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351, 351],
    [305, 435, 146, 311, 93, 0, 305, 435, 311, 305, 435, 311, 305, 435, 305, 435, 305, 435, 305, 435, 305, 435, 305, 435, 305, 435, 305, 435, 305, 435],
    [99, 351, 248, 253, 363, 305, 0, 276, 566, 99, 343, 495, 274, 404, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [271, 276, 298, 298, 351, 435, 276, 0, 566, 271, 343, 495, 274, 366, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [502, 566, 311, 311, 311, 311, 566, 566, 0, 502, 343, 495, 274, 366, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [57, 98, 248, 253, 363, 305, 99, 271, 502, 0, 343, 495, 274, 404, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [279, 343, 369, 311, 351, 435, 343, 343, 343, 343, 0, 495, 274, 366, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [431, 495, 274, 311, 311, 311, 495, 495, 495, 495, 495, 0, 274, 366, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [319, 274, 253, 253, 363, 305, 274, 274, 274, 274, 274, 274, 0, 366, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [404, 366, 311, 311, 351, 435, 404, 366, 366, 404, 366, 366, 366, 0, 245, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [245, 177, 248, 253, 363, 305, 245, 245, 245, 245, 245, 245, 245, 245, 0, 211, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [211, 368, 248, 253, 351, 435, 211, 211, 211, 211, 211, 211, 211, 211, 211, 0, 185, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [185, 225, 248, 253, 363, 305, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 0, 134, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [134, 188, 248, 253, 351, 435, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 0, 281, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [281, 361, 248, 253, 351, 305, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 0, 448, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [448, 548, 248, 253, 351, 435, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 0, 128, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [128, 161, 248, 253, 351, 305, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 454, 284, 314, 186, 78, 62, 138, 213, 262],
    [454, 553, 248, 253, 351, 435, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 448, 454, 454, 0, 284, 314, 186, 78, 62, 138, 213, 262],
    [284, 219, 248, 253, 351, 305, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 0, 314, 186, 78, 62, 138, 213, 262],
    [314, 249, 248, 253, 351, 305, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 0, 186, 78, 62, 138, 213, 262],
    [186, 106, 248, 253, 363, 305, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 0, 78, 62, 138, 213, 262],
    [78, 139, 248, 253, 363, 305, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 0, 62, 138, 213, 262],
    [62, 67, 248, 253, 363, 305, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 0, 138, 213, 262],
    [138, 65, 248, 253, 363, 305, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 0, 213, 262],
    [213, 100, 248, 253, 363, 305, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 0, 262],
    [262, 325, 248, 253, 363, 305, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 0]
])

# Генерация координат
X, Y = generate_coordinates_from_distance_matrix(distance_matrix)
n = len(X)

# Матрица относительных расстояний между городами
M = np.zeros([n, n])
for i in np.arange(0, n, 1):
    for j in np.arange(0, n, 1):
        if i != j:
            M[i, j] = sqrt((X[i] - X[j])**2 + (Y[i] - Y[j])**2)
        else:
            M[i, j] = float('inf')

# Начало замера времени
start_time = time.time()

way.append(ib)
for i in np.arange(1, n, 1):
    s = []
    for j in np.arange(0, n, 1):
        s.append(M[way[i-1], j])
    way.append(s.index(min(s)))
    for j in np.arange(0, i, 1):
        M[way[i], way[j]] = float('inf')
        M[way[i], way[j]] = float('inf')

# Вычисление общей длины пути
S = sum([sqrt((X[way[i]] - X[way[i+1]])**2 + (Y[way[i]] - Y[way[i+1]])**2) for i in np.arange(0, n-1, 1)]) + sqrt((X[way[n-1]] - X[way[0]])**2 + (Y[way[n-1]] - Y[way[0]])**2)

# Конец замера времени
end_time = time.time()

# Вывод результатов
plt.title(f'Общий путь-{round(S, 3)}. Номер города-{ib}. Всего городов-{n}.\n Координаты X,Y случайные числа от {a} до {m}. Время выполнения: {round(end_time - start_time, 3)} сек.')
X1 = [X[way[i]] for i in np.arange(0, n, 1)]
Y1 = [Y[way[i]] for i in np.arange(0, n, 1)]
plt.plot(X1, Y1, color='r', linestyle=' ', marker='o')
plt.plot(X1, Y1, color='b', linewidth=1)
X2 = [X[way[n-1]], X[way[0]]]
Y2 = [Y[way[n-1]], Y[way[0]]]
plt.plot(X2, Y2, color='g', linewidth=2, linestyle='-', label='Путь от последнего к первому городу')
plt.legend(loc='best')
plt.grid(True)
plt.show()
